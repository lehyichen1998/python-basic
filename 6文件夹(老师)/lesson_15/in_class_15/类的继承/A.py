'''
第三个：
    类的继承：
    通过继承父类直接获得父类中的方法，这种方式一般用于两个类中来
    实现同一个方法，比如狗类就有动物很多的特征，所有动物类是狗类的
    父类，狗类可以直接继承父类，获得里面的方法和实例属性；
        类方法的重写：
            原有的类方法满足不了基本需求
            但是原有的类方法又有着很多的方法可以共同使用，
            所以在这种基础上就诞生了类的重写，意思就是将原来的方法重写一下
            覆盖原来的 方法；
'''

'''
#继承：
    什么是继承？
    例子：
    就像子女可以继承父母的家产一样，可以直接获取到，那么在类中，他是怎么实现的呢？
    继承的由来；
        在一个类中他有很多的方法，我们之前的定义的类，是为了封装方法，方便我们直接调用
        那么我在重新开发一些功能的时候，有时候会要使用的之前的类的方法，这个时候我再写一次
        是不是很麻烦，对吧，那么python这门语言提供了类的继承，也就是说我们在开发一些新的类
        的时候，可以直接拿原来写好的方法，直接进行调用，这样就大大的减轻了开发的时间；
    那么我们怎么去继承那个类里面的方法呢？
    # 来定义一个动物类；
'''
# 定义当前动物类
class Animal(object):
    def run(self):
        print('动物在奔跑~')
    def eat(self):
        print('动物在吃东西~')
    def sleep(self):
        print('动物在睡觉~')

# 定义狗类
'''
    箭头往下走就表示有类继承了该类
    此时的dog类中的关系为Animal子类
    Animal是Dog的父类
'''
class Dog(Animal):

    pass


d = Dog()
d.run()