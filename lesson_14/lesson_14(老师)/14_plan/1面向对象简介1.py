'''
面向对象  （高级语言）
    python面向对象的编程语言
    面向过程   c , c++,
    面向对象  java，python，php     google： python中的类如何理解； oop(object object programming)

面向过程   （吃饭）  c（指针），c++
    我要吃饭，1外面吃，2点外卖，3自己做
    第一：
    1出门
    2抵达餐厅
    3点菜
    4开始吃饭
    第二：
    1打开手机
    2搜索你想吃的外卖
    3等待送餐
    4吃你的外卖
面向过程的问题
    当我们在每次执行吃饭的功能的时候，会很麻烦
面向对象：
    没那么在乎过程，他在乎的是对象
    一切皆为对象（变量，列表，函数名，字符，一个数字，很宏观的概念）
    通过对象直接实现功能
    (吃饭)
        通过吃饭的对象.吃饭的方法（）
        直接实现吃饭的功能
    一开始就要设计好，对象中会实现什么功能
    (吃饭)
        吃饭的对象-给他一些属性
            （外卖）
            （去外面吃）
            （自己做）
            （女朋友做的饭）
            吃饭的对象.（外卖）
     总结：
        面向对象的代码容易维护，
        在开始定义设计整体的时候会复杂一点
        但是在后面就非常方便了，容易复用

面向对象的概念：
        -对象是内存中用来存储数据的一块区域
        -我们一般用的都是对象
        -一个函数。的那个变量，甚至一串代码都是通过代码的形式存在的
            对象主要由三部分构成
            -对象的值
            -对象的id
            -对象的类型
什么是对象呢？
        概念：
            对象又称oop(object,object,programme)
        简要说一下对象的概念：
            首先是找对象
            利用对象
            通过对象来调用里面的实例方法
总结：
    当我们要实现某个特殊的功能时，而python内置对象不能够直接提供到方法
    的时候，这时候我们就需要自己来创建class类对象来自己实现里面的方法
    当我们再需要时，再对其进行调用
'''

a = 1
# print(a,id(a),type(a))
'''类的定义'''
#class类
'''
类的定义  一定是有原则；
    
'''
class Dinner:
    print('吃晚餐')

    pass

# if __name__ == '__main__':
    # Dinner() # 使用Dinner对象
    # dr = Dinner() # 使用Dinner这个对象创建一个实例
    # print(dr) # 打印dinner 的实例的内存地址<__main__.Dinner object at 0x000002079EFAB390>

#导入其他类的一个方式

# from 第13面向对象的概念.classse_1 import oop_test
# op = oop_test
# op_dr = op.Dinner
# from 第13面向对象的概念.classse_4 import people
# pr = people.Person









